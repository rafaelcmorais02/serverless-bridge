service: ${file(config.json):project_name}
frameworkVersion: "3"

package:
  exclude:
    - api/venv/**
    - api/__pycache__/*
    - client/**
    - node_modules/**
    - README.md
    - package.json
    - package-lock.json

plugins:
  - serverless-localstack
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-s3-deploy

custom:
  assets:
    auto: false
    targets:
      - bucket:
          Ref: DistBucket
        acl: public-read
        files:
          - source: client/dist/${opt:stage, 'stg'}/
            headers:
              CacheControl: max-age=31104000 # 1 year
            globs:
              - "**/*"
  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - local
    edgePort: 4566 # optional - LocalStack edge port to connect to

  wsgi:
    app: api.config.wsgi.application

  pythonRequirements:
    fileName: ./build/pip/requirements/compiled/${file(config.json):stages.${opt:stage, 'local'}.requirements}
    layer: ${file(config.json):stages.${opt:stage, 'local'}.includeLayers}

provider:
  name: aws
  timeout: 30
  runtime: python3.11
  stage: ${opt:stage, 'local'}
  region: ${file(config.json):stages.${opt:stage, 'local'}.region}
  environment:
    STATIC_FILES_BUCKET_NAME: ${ssm(raw):${file(config.json):project_name}-${self:provider.stage}-STATIC_FILES_BUCKET_NAME}
    AWS_REGION_NAME: ${ssm(raw):${file(config.json):project_name}-${self:provider.stage}-AWS_REGION_NAME}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - arn:aws:s3:::${self:provider.environment.STATIC_FILES_BUCKET_NAME}
            - arn:aws:s3:::${self:provider.environment.STATIC_FILES_BUCKET_NAME}/*

        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:PutParameter
          Resource: "arn:aws:ssm:*:*:*"

functions:
  api:
    handler: wsgi_handler.handler
    layers:
      - Ref: ${file(config.json):stages.${opt:stage, 'local'}.layer}
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    environment:
      POSTGRES_DB: ${ssm(raw):${file(config.json):project_name}-${self:provider.stage}-POSTGRES_DB}
      POSTGRES_USER: ${ssm(raw):${file(config.json):project_name}-${self:provider.stage}-POSTGRES_USER}
      POSTGRES_PASSWORD: ${ssm(raw):${file(config.json):project_name}-${self:provider.stage}-POSTGRES_PASSWORD}
      POSTGRES_HOST: ${ssm(raw):${file(config.json):project_name}-${self:provider.stage}-POSTGRES_HOST}
      POSTGRES_PORT: ${ssm(raw):${file(config.json):project_name}-${self:provider.stage}-POSTGRES_PORT}
      DJANGO_SETTINGS_MODULE: ${ssm(raw):${file(config.json):project_name}-${self:provider.stage}-DJANGO_SETTINGS_MODULE}
      SECRET_KEY: ${ssm(raw):${file(config.json):project_name}-${self:provider.stage}-SECRET_KEY}

resources:
  Resources:
    StaticFilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.STATIC_FILES_BUCKET_NAME}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    StaticFilesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticFilesBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Action: "s3:GetObject"
              Effect: Allow
              Principal: "*"
              Resource: "arn:aws:s3:::${self:provider.environment.STATIC_FILES_BUCKET_NAME}/*"

    DistBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: dist-${opt:stage, 'local'}
        WebsiteConfiguration:
          IndexDocument: index.html
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - "GET"
              AllowedOrigins:
                - "*"
              MaxAge: 3000

    DistBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: DistBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Action: "s3:GetObject"
              Effect: Allow
              Principal: "*"
              Resource: "arn:aws:s3:::dist-${opt:stage, 'local'}/*"
