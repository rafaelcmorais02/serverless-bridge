service: ${self:custom.deployConfig.projectName}
frameworkVersion: "3"

package:
  exclude:
    - api/venv/**
    - api/__pycache__/*
    - client/**
    - node_modules/**
    - README.md
    - package.json
    - package-lock.json

plugins:
  - serverless-localstack
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-s3-deploy

custom:
  deployConfig:
    projectName: ${file(deploy-config.json):projectName}
    timeout: ${file(deploy-config.json):timeout}
    memorySize: ${file(deploy-config.json):memorySize}
    stages:
      local:
        region: ${file(deploy-config.json):stages.local.region}
        includeLayers: false
        layer: AWS::NoValue
        requirements: local-requirements.txt
        requestLimit: ${file(deploy-config.json):stages.local.requestLimit}
        requestLimitPeriod: ${file(deploy-config.json):stages.local.requestLimitPeriod}
        throttleBurstLimit: ${file(deploy-config.json):stages.local.throttleBurstLimit}
        throttleRequestLimit: ${file(deploy-config.json):stages.local.throttleRequestLimit}
      stg:
        region: ${file(deploy-config.json):stages.stg.region}
        includeLayers: true
        layer: PythonRequirementsLambdaLayer
        requirements: stg-requirements.txt
        requestLimit: ${file(deploy-config.json):stages.stg.requestLimit}
        requestLimitPeriod: ${file(deploy-config.json):stages.stg.requestLimitPeriod}
        throttleBurstLimit: ${file(deploy-config.json):stages.stg.throttleBurstLimit}
        throttleRequestLimit: ${file(deploy-config.json):stages.stg.throttleRequestLimit}
      prd:
        region: ${file(deploy-config.json):stages.prd.region}
        includeLayers: true
        layer: PythonRequirementsLambdaLayer
        requirements: prd-requirements.txt
        requestLimit: ${file(deploy-config.json):stages.prd.requestLimit}
        requestLimitPeriod: ${file(deploy-config.json):stages.prd.requestLimitPeriod}
        throttleBurstLimit: ${file(deploy-config.json):stages.prd.throttleBurstLimit}
        throttleRequestLimit: ${file(deploy-config.json):stages.prd.throttleRequestLimit}

  ssmParameters:
    POSTGRES_DB: ${ssm(raw):${self:custom.deployConfig.projectName}-${self:provider.stage}-POSTGRES_DB}
    POSTGRES_USER: ${ssm(raw):${self:custom.deployConfig.projectName}-${self:provider.stage}-POSTGRES_USER}
    POSTGRES_PASSWORD: ${ssm(raw):${self:custom.deployConfig.projectName}-${self:provider.stage}-POSTGRES_PASSWORD}
    POSTGRES_HOST: ${ssm(raw):${self:custom.deployConfig.projectName}-${self:provider.stage}-POSTGRES_HOST}
    POSTGRES_PORT: ${ssm(raw):${self:custom.deployConfig.projectName}-${self:provider.stage}-POSTGRES_PORT}
    DJANGO_SETTINGS_MODULE: ${ssm(raw):${self:custom.deployConfig.projectName}-${self:provider.stage}-DJANGO_SETTINGS_MODULE}
    SECRET_KEY: ${ssm(raw):${self:custom.deployConfig.projectName}-${self:provider.stage}-SECRET_KEY}
    ALLOWED_HOSTS: ${ssm(raw):${self:custom.deployConfig.projectName}-${self:provider.stage}-ALLOWED_HOSTS}

  buckets:
    staticFiles:
      name: static-files-${opt:stage, 'local'}
      region: sa-east-1
    dist:
      name: dist-${opt:stage, 'local'}
      region: sa-east-1

  assets:
    auto: false
    targets:
      - bucket:
          Ref: DistBucket
        acl: public-read
        files:
          - source: client/dist/${opt:stage, 'local'}/
            headers:
              CacheControl: max-age=31104000 # 1 year
            globs:
              - "**/*"
  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - local
    edgePort: 4566 # optional - LocalStack edge port to connect to

  wsgi:
    app: api.config.wsgi.application

  pythonRequirements:
    fileName: ./api/config/requirements/compiled/${self:custom.deployConfig.stages.${opt:stage, 'local'}.requirements}
    layer: ${self:custom.deployConfig.stages.${opt:stage, 'local'}.includeLayers}
    useStaticCache: false
    useDownloadCache: false
    pipCmdExtraArgs:
      - "--platform manylinux2014_x86_64"
      - "--only-binary=:all:"
    slim: true

provider:
  name: aws
  timeout: ${self:custom.deployConfig.timeout}
  memorySize: ${self:custom.deployConfig.memorySize}
  runtime: python3.11
  stage: ${opt:stage, 'local'}
  region: ${self:custom.deployConfig.stages.${opt:stage, 'local'}.region}
  apiGateway:
    apiKeys:
      - ${opt:stage}-apiKey
    usagePlan:
      quota:
        limit: ${self:custom.deployConfig.stages.${opt:stage, 'local'}.requestLimit}
        period: ${self:custom.deployConfig.stages.${opt:stage, 'local'}.requestLimitPeriod}
      throttle:
        burstLimit: ${self:custom.deployConfig.stages.${opt:stage, 'local'}.throttleBurstLimit}
        rateLimit: ${self:custom.deployConfig.stages.${opt:stage, 'local'}.throttleRequestLimit}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - arn:aws:s3:::${self:custom.buckets.staticFiles.name}
            - arn:aws:s3:::${self:custom.buckets.staticFiles.name}/*

        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:PutParameter
          Resource: "arn:aws:ssm:*:*:*"

functions: ${file(serverless.functions.yml):functions}

resources: ${file(serverless.resources.yml):resources}
